@-webkit-keyframes ring{0%{-webkit-transform:translateX(-1px);transform:translateX(-1px)}to{-webkit-transform:rotate(5deg) translateX(1px);transform:rotate(5deg) translateX(1px)}}@keyframes ring{0%{-webkit-transform:translateX(-1px);transform:translateX(-1px)}to{-webkit-transform:rotate(5deg) translateX(1px);transform:rotate(5deg) translateX(1px)}}@-webkit-keyframes sendEmail{0%,to{-webkit-transform:rotate(0);transform:rotate(0)}25%{-webkit-transform:rotate(-15deg);transform:rotate(-15deg)}75%{-webkit-transform:rotate(15deg);transform:rotate(15deg)}}@keyframes sendEmail{0%,to{-webkit-transform:rotate(0);transform:rotate(0)}25%{-webkit-transform:rotate(-15deg);transform:rotate(-15deg)}75%{-webkit-transform:rotate(15deg);transform:rotate(15deg)}}@-webkit-keyframes formPlceholder{0%,to{padding:10px 25px}50%{padding:10px 25px 10px 30px}}@keyframes formPlceholder{0%,to{padding:10px 25px}50%{padding:10px 25px 10px 30px}}a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:none}table{border-collapse:collapse;border-spacing:0}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */